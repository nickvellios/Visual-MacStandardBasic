////  Visual MacStandardBasic////  Copyright 1999 Nick Vellios. All rights reserved.////  This code is licensed under the "Take a kid fishing or hunting license"//  See website or email below for details.////  nick@vellios.com//  http://www.Vellios.com//enum {//	WASTE Demo signature	sigWASTEDemo		=		'MSBE',		//	resource types, clipboard types, and file types	kTypeDeskAccessory	=		'DRVR',	kTypeFont			=		'FONT',	kTypePicture		=		'PICT',	kTypeSound			=		'snd ',	kTypeSoup			=		'SOUP',	kTypeStyles			=		'styl',	kTypeText			=		'TEXT'};enum {//	virtual key codes for navigation keys found on extended keyboards	keyPgUp				=		0x74,	keyPgDn				=		0x79,	keyHome				=		0x73,	keyEnd				=		0x77,//	virtual key codes generated by some function keys	keyF1				=		0x7A,	keyF2				=		0x78,	keyF3				=		0x63,	keyF4				=		0x76};//	possible values for HandleOpenDocument refCon parameterenum {	kDoOpen		= 0,	kDoPrint	= 1};// 	other commonly used constants#define	kBarWidth		16		// width of a scroll bar#define kTitleHeight	20		// usual height of a window title bar#define kTextMargin		3		// indent of text rect from a window port rect#define kScrollDelta	11		// pixels to scroll when the scroll bar arrow is clicked#define kMinSystemVersion		0x0700	// system 7#define kScrapThreshold			4 * 1024// enumeration types used for closing a window and/or quitting the applicationtypedef enum {closingWindow, closingApplication} ClosingOption;typedef enum {savingYes, savingNo, savingAsk} SavingOption;/* *	Resource ID numbers */// menu IDsenum {	kMenuApple		= 1,	kMenuFile,	kMenuEdit,	kMenuRun,	kMenuTools,	kMenuHelp};//	Apple Menu itemsenum {	kItemAbout		= 1};//	File menu itemsenum {	kItemNewPjt		= 1,	kItemOpenPjt	= 2,	kItemClosePjt	= 3,	kItemNewForm	= 5,	kItemNew		= 6,	kItemSave		= 7,	kItemSaveAs		= 8,	kItemCloseWin	= 9,	kItemAdd		= 10,	kItemRemove		= 11,	kItemPSetup		= 13,	kItemPrint		= 14,	kItemQuit		= 16};//	Edit menu itemsenum {	kItemUndo		= 1,	kItemCut		= 3,	kItemCopy		= 4,	kItemPaste		= 5,	kItemClear		= 6,	kItemSelectAll	= 7,	kItemFind		= 9,	kItemFindNext	= 10,	kItemReplace	= 11,	kItemReplaceNext = 12};//	Run menu itemsenum {	kItemRunComp	= 1,	kItemCompile	= 2,	kItemRun		= 3};enum {	kItemSSWSite	= 1,	kItemVMSBSite	= 2,	kItemEmail		= 3,	kItemOnlineDocs	= 4};/*//	Size menu itemsenum {	kItemLastSize	= 6,	kItemSmaller	= 8,	kItemLarger		= 9};*///	Style menu itemsenum {	kItemPlainText	= 1,	kItemBold,	kItemItalic,	kItemUnderline,	kItemOutline,	kItemShadow,	kItemCondensed,	kItemExtended};//	Color menu itemsenum {	kItemBlack		= 1,	kItemRed,	kItemGreen,	kItemBlue,	kItemCyan,	kItemMagenta,	kItemYellow};//	Alignment menu itemsenum {	kItemAlignDefault	= 1,	kItemAlignLeft		= 3,	kItemCenter,	kItemAlignRight,	kItemJustify};//	Features menu itemsenum {	kItemAlignment		= 1,	kItemTabHooks,	kItemAutoScroll		= 4,	kItemOutlineHilite,	kItemReadOnly,	kItemIntCutAndPaste,	kItemDragAndDrop,	kItemOffscreenDrawing};//	Alert & dialog template resource IDsenum {	kAlertNeedSys7		= 128,	kAlertGenError		= 130,	kAlertSaveChanges	= 131,	kDialogAboutBox		= 256};//	String list resource IDsenum {	kUndoStringsID		= 128,	kClosingQuittingStringsID};// miscellaneous resource IDsenum {	kMenuBarID				= 128,	kWindowTemplateID		= 128,	kScrollBarTemplateID	= 128,	kPromptStringID			= 128};// a DocumentRecord is a structure associated with each window// a handle to this structure is kept in the window refConstruct DocumentRecord{	WindowRef			owner;				// the window	ControlRef			scrollBars [ 2 ];	// its scroll bars	//WEReference 		we;					// its WASTE instance	Handle 				fileAlias;			// alias to associated file};  // DocumentRectypedef struct DocumentRecord DocumentRecord, *DocumentPtr, **DocumentHandle;struct aDocumentRecord{	Boolean gHaveAppearanceMgr;// = false;};typedef struct aDocumentRecord aDocumentRecord, *aDocumentPtr, **aDocumentHandle;typedef struct{	char			registered;} PrefRecord, /**PrefPtr,*/ **PrefHandle;typedef struct{	Boolean			registered;} yaya, /**PrefPtr,*/ **yayahnd;Boolean	OpenPrefFile(void);Boolean	GetSerial(void);Boolean	SaveSerial(Boolean registered);void	SavePrefFile(void);void DoRegisterDialog(void);Boolean CheckValue(Str255 valStr);pascal Boolean StdFilter(DialogPtr theDialog, EventRecord *theEvent, short *itemHit);